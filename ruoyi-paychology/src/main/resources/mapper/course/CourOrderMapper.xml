<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.renxin.course.mapper.CourOrderMapper">
    
    <resultMap type="CourOrder" id="CourOrderResult">
        <result property="id"    column="id"    />
        <result property="orderId"    column="order_id"    />
        <result property="createTime"    column="create_time"    />
        <result property="status"    column="status"    />
        <result property="userId"    column="user_id"    />
        <result property="amount"    column="amount"    />
        <result property="courseId"    column="course_id"    />
    </resultMap>

    <sql id="selectCourOrderVo">
        select id, order_id, create_time, status, user_id, amount, course_id from cour_order
    </sql>

    <select id="selectCourOrderList" parameterType="CourOrder" resultMap="CourOrderResult">
        select co.id,  co.order_id,  co.create_time,  co.status,  co.user_id,  co.amount,  co.course_id, cc.url, cc.name, cc.author
        from cour_order  co
        left join cour_course  cc
        on co.course_id = cc.id
        <where>  
            <if test="orderId != null  and orderId != ''"> and co.order_id = #{orderId}</if>
            <if test="status != null "> and co.status = #{status}</if>
            <if test="userId != null  and userId != '' "> and co.user_id = #{userId}</if>
            <if test="amount != null "> and co.amount = #{amount}</if>
            <if test="courseId != null  and courseId != ''"> and co.course_id = #{courseId}</if>
        </where>
    </select>

    <select id="selectCourOrderById"  resultMap="CourOrderResult">
        <include refid="selectCourOrderVo"/>
        where id = #{id}
    </select>

    <select id="selectCourOrderByOrderId" parameterType="String" resultMap="CourOrderResult">
        <include refid="selectCourOrderVo"/>
        where order_id = #{orderId}
    </select>
        
    <insert id="insertCourOrder" parameterType="CourOrder" useGeneratedKeys="true" keyProperty="id">
        insert into cour_order
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="orderId != null and orderId != ''">order_id,</if>
            <if test="createTime != null">create_time,</if>
            <if test="status != null">status,</if>
            <if test="userId != null and userId != ''">user_id,</if>
            <if test="amount != null">amount,</if>
            <if test="courseId != null and courseId != ''">course_id,</if>
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="orderId != null and orderId != ''">#{orderId},</if>
            <if test="createTime != null">#{createTime},</if>
            <if test="status != null">#{status},</if>
            <if test="userId != null and userId != ''">#{userId},</if>
            <if test="amount != null">#{amount},</if>
            <if test="courseId != null and courseId != ''">#{courseId},</if>
         </trim>
    </insert>

    <update id="updateCourOrder" parameterType="CourOrder">
        update cour_order
        <trim prefix="SET" suffixOverrides=",">
            <if test="orderId != null and orderId != ''">order_id = #{orderId},</if>
            <if test="createTime != null">create_time = #{createTime},</if>
            <if test="status != null">status = #{status},</if>
            <if test="userId != null and userId != ''">user_id = #{userId},</if>
            <if test="amount != null">amount = #{amount},</if>
            <if test="courseId != null and courseId != ''">course_id = #{courseId},</if>
        </trim>
        <trim prefix="where" prefixOverrides="and">
            <if test="id != null">and id = #{id}</if>
            <if test="orderId != null">and order_id = #{orderId}</if>
        </trim>
    </update>

    <delete id="deleteCourOrderById" >
        delete from cour_order where id = #{id}
    </delete>

    <delete id="deleteCourOrderByIds" parameterType="String">
        delete from cour_order where id in 
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>

    <select id="getOrderDetailById"  resultType="com.renxin.course.vo.OrderVO">
        select co.id, co.order_id, co.status, co.user_id, co.amount as amount, co.course_id, pop.pay_status , pop.amount as pay_amount
        from cour_order co
        left join psy_order_pay pop
        on co.id = pop.order_id
        where co.id = #{id}
    </select>

    <select id="queryOrderList" parameterType="com.renxin.course.domain.dto.OrderQueryDTO" resultType="com.renxin.course.vo.OrderQueryVO">
        select co.id, co.order_id as orderId, co.status, co.user_id, pu.name as userName, co.amount, co.create_time as createTime,  co.course_id, cc.name as courseName
        from cour_order co
        left join psy_user pu
        on co.user_id = pu.id
        left join cour_course cc
        on co.course_id = cc.id
        <where>
            <if test="OrderId != null  and orderId != ''"> and co.order_id like concat('%', #{orderId}, '%')</if>
            <if test="status != null "> and co.status = #{status}</if>
            <if test="userName != null  and userName != '' "> and pu.name like concat('%', #{userName}, '%')</if>
            <if test="lowAmount != null  and lowAmount != '' "> and po.amount <![CDATA[>=]]> #{lowAmount}</if>
            <if test="highAmount != null  and highAmount != '' "> and po.amount <![CDATA[<=]]> #{highAmount}</if>
        </where>
    </select>

    <select id="getOrderByCancel"  resultMap="CourOrderResult">
        <include refid="selectCourOrderVo"/>
        <where>
            <if test="status != null">and status = #{status}</if>
            <if test="time != null ">and create_time <![CDATA[<=]]> #{time}</if>
        </where>
    </select>

    <select id="getOrderListByUserId"  resultType="com.renxin.course.vo.CourseOrderVO">
        SELECT
        co.user_id,
        c.author,
        c.name AS course_title,
        c.price AS course_price,
        c.icon_url AS course_icon_url,
        co.status,
        co.create_time,
        co.order_id AS orderNo,
        co.id,
        co.course_id,
        SUM(cs.duration) AS total_duration,
        COUNT(cs.id) AS section_num,
        finished_sections.finish_num
        FROM cour_order co
        LEFT JOIN  cour_section cs ON co.course_id = cs.course_id
        LEFT JOIN  cour_course c ON co.course_id = c.id
        LEFT JOIN
        ( SELECT user_id,  COUNT(id) AS finish_num  FROM  cour_user_course_section
        WHERE finish_status = 1 GROUP BY user_id ) finished_sections ON co.user_id = finished_sections.user_id

        <where>
            <if test="userId != null">and co.user_id = #{userId}</if>
            <if test="status != null ">and co.status = #{status}</if>
        </where>

        GROUP BY
        co.user_id,
        c.author,
        c.name,
        c.price,
        c.icon_url,
        co.status,
        co.create_time,
        co.order_id,
        co.id,
        co.course_id;

    </select>
</mapper>